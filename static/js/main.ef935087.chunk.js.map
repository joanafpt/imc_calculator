{"version":3,"sources":["services/imcService.js","components/ResultExplanation.js","components/Input.js","components/Button.js","components/ImcCalculator.js","components/AuthorTag.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["imcService","imcQualitativeEvaluation","result","includes","replace","imcCalculator","h","w","toFixed","inputValidationForHeight","value","lettersRegex","otherChars","char","trim","length","test","inputValidationForWeight","ResultExplanation","className","this","props","validResult","resultExplanation","Component","Input","name","id","placeholder","onChange","Button","class","type","ImcCalculator","state","height","weight","displayedResult","bind","onSubmit","cleanValues","setState","event","target","toString","preventDefault","evaluateHeight","evalWeight","lenght","res","resultForDisplay","resToDisplay","classname","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef935087.chunk.js","sourcesContent":["const inputValidationForHeight = (value) => {\r\n      let numbersRegex = /\\d*\\.\\d*/;\r\n      let lettersRegex = /[a-zA-Z]/;\r\n      let otherChars = ['|', '!', '\"', '#', '$', '%', '&', '/', '(', ')', '=', '?', '»', '«', '`', '´', '*', '+', '^', '~', '-', '_', ':', ';', ',', '<', '>'];\r\n\r\n      for (let char in value) {\r\n            if (otherChars.includes(value[char])) {\r\n                  //console.log(value[char]);\r\n                  // return 'invalid char';\r\n                  return false;\r\n            }\r\n      }\r\n      if (value.trim().length === 0) {\r\n            return false;\r\n      }\r\n      else if (lettersRegex.test(value)) {\r\n            return false;\r\n      }\r\n      else if (!lettersRegex.test(value) && numbersRegex.test(value)) {\r\n            return true;\r\n      }\r\n      else {\r\n            return false;\r\n      }\r\n}\r\n\r\n\r\nconst inputValidationForWeight = (value) => {\r\n      let numbersRegex = /\\d*\\.\\d*/;\r\n      let lettersRegex = /[a-zA-Z]/;\r\n      let justNumbers = /^[0-9]{1,3}$/g;\r\n\r\n      if ((!lettersRegex.test(value) && numbersRegex.test(value)) || (!lettersRegex.test(value) && justNumbers.test(value))) {\r\n            return true;\r\n      } else {\r\n            return false;\r\n      }\r\n}\r\n\r\n\r\n\r\n\r\nconst imcQualitativeEvaluation = (result) => {\r\n      let text = '';\r\n      if (result.includes(',')) { result.replace(',', '.'); }\r\n      if (result <= 18.5) {\r\n            return text = \"Peso corporal baixo\";\r\n      } else if (result > 18.5 && result < 25) {\r\n            return text = \"Peso corporal normal\";\r\n      } else if (result >= 25 && result < 29.9) {\r\n            return text = \"Peso corporal excessivo\";\r\n      } else if (result >= 30 && result < 35) {\r\n            return text = \"Obesidade moderada\";\r\n      } else if (result >= 35 && result < 40) {\r\n            return text = \"Obesidade grave\";\r\n      } else if (result >= 40 && result < 50) {\r\n            return text = \"Obesidade mórbida\";\r\n      } else if (result > 50) {\r\n            return text = \"Superobesidade\";\r\n      }\r\n}\r\n\r\n\r\nconst imcCalculator = (h, w) => {\r\n      let _result;\r\n      const squareHeight = h * h;\r\n      _result = w / squareHeight;\r\n      _result = _result.toFixed(1);\r\n      return _result;\r\n}\r\n\r\n\r\nconst imcService = {\r\n      imcQualitativeEvaluation: imcQualitativeEvaluation,\r\n      imcCalculator: imcCalculator,\r\n      inputValidationForHeight: inputValidationForHeight,\r\n      inputValidationForWeight: inputValidationForWeight,\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default imcService;","import React, { Component } from 'react';\r\nimport './ResultExplanation.css'\r\n\r\nclass ResultExplanation extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"showresult\">\r\n                { this.props.validResult ? <> {`O imc é de ${this.props.result} - ${this.props.resultExplanation}`} </>\r\n                    :\r\n                    <>   {this.props.result}</>\r\n\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ResultExplanation;\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Input extends Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <input className=\"form-control userinput\"\r\n                name={this.props.name}\r\n                id={this.props.id}\r\n                placeholder={this.props.placeholder}\r\n                value={this.props.value}\r\n                onChange={this.props.onChange}\r\n\r\n            />\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Button extends Component {\r\n    render() {\r\n        return (\r\n            <div class=\"col-12\">\r\n                <button className='btn'\r\n                    type=\"submit\"\r\n                    id=\"submit-weight\">SUBMETER\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport imcService from '../services/imcService';\r\nimport ResultExplanation from './ResultExplanation';\r\nimport Input from './Input';\r\nimport Button from './Button';\r\nimport './ImcCalculator.css'\r\n\r\nclass ImcCalculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            height: '', weight: '', displayedResult: null, validResult: '',\r\n        }\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.cleanValues = this.cleanValues.bind(this);\r\n    }\r\n\r\n    cleanValues() {\r\n        this.setState({ height: '', weight: '', });\r\n    }\r\n\r\n    onChange(event) {\r\n        this.setState({ [event.target.name]: event.target.value.toString() });\r\n    }\r\n    onSubmit(event) {\r\n        event.preventDefault();\r\n        var evaluateHeight = imcService.inputValidationForHeight(this.state.height);\r\n        var evalWeight = imcService.inputValidationForWeight(this.state.weight);\r\n        if (this.state.height.lenght === 0 || this.state.weight.length === 0) {\r\n            this.setState({\r\n                displayedResult: 'Por favor, inserir valores válidos.',\r\n                resToDisplay: '',\r\n                validResult: ''\r\n            });\r\n            return;\r\n        }\r\n        const res = imcService.imcCalculator(this.state.height, this.state.weight);\r\n        const resultForDisplay = imcService.imcQualitativeEvaluation(res);\r\n\r\n        if (evaluateHeight && evalWeight) {\r\n            this.setState({\r\n                displayedResult: res, resToDisplay: resultForDisplay, validResult: 'valid'\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                displayedResult: 'Por favor, inserir valores válidos.',\r\n                resToDisplay: '',\r\n                validResult: null\r\n            });\r\n        }\r\n        this.cleanValues();\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div classname=\"row\">\r\n                    <form onSubmit={this.onSubmit} >\r\n                        <Input className=\"form-control userinput\" name=\"height\" id=\"h\" placeholder=\"Insira a sua altura. Ex.: 1.70\" value={this.state.height} onChange={this.onChange} />\r\n                        <Input className=\"form-control userinput\" name=\"weight\" id=\"w\" placeholder=\"Insira o seu peso. Ex.: 60\" onChange={this.onChange} value={this.state.weight} />\r\n                        <div className=\"form-row text-center\">\r\n                            <Button />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n                <div classname=\"row\" >\r\n                    <ResultExplanation result={this.state.displayedResult} resultExplanation={this.state.resToDisplay} validResult={this.state.validResult} displayedResult={this.state.displayedResult} />\r\n                </div>\r\n            </>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ImcCalculator;","import React, { Component } from 'react';\r\nimport './AuthorTag.css';\r\n\r\nclass Author extends Component {\r\n    render() {\r\n        return (\r\n\r\n            <a href=\"https://github.com/joanafpt\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\">Joana Teixeira @ github\r\n           </a>      \r\n           \r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Author;","import React from 'react';\r\nimport ImcCalculator from './ImcCalculator';\r\nimport Author from './AuthorTag';\r\nimport './Main.css';\r\n\r\nfunction Main() {\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <p className=\"page-title\"> Calculadora de Índice de Massa Corporal</p>\r\n                        <p className=\"introline\">Introduza no formulário os valores de altura e peso para obter o seu IMC</p>\r\n                        <ImcCalculator />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from '../src/components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}